#import "../data/errors.jsligo" "Errors"
#import "../data/token.jsligo" "Token"
#import "../data/ledger.jsligo" "Ledger"
#import "../data/storage.jsligo" "Storage"
#import "../data/approvals.jsligo" "Approvals"
#import "./transfer.jsligo" "Transfer"

type Storage = Storage.T;

type ExportedTicket = ticket<[Token.T, option<bytes>]>;

type TicketToExport =
   // @layout comb
   {
      from_    : address;
      token_id : Token.T;
      amount   : nat;
   };

type ExportTicketRequest = {
  to_ : address;
  ticketsToExport : list<TicketToExport>;
};

type ExportTicketsTo = {
   to_ : address;
   ticketsToExport : list<ExportedTicket>;
   };

type ExportTicketOperation = {
  destination : option<address>;
  requests : list<ExportTicketRequest>;
};

type balance_event_data =
  @layout("comb")
  {
    owner: address,
    token_id: nat,
    new_balance: nat,
    diff: int
  };

type allowance_update_type = 
   @layout("comb")
{
   owner: address,
   spender: address,
   token_id: nat,
   new_allowance: nat,
   diff: int
};

type ExportTicket = ExportTicketOperation;
export type T = ExportTicket;

type LedgerModule = Ledger.ledger_module;

const create_ticket = <A, L>(
   storage: Storage<A, L>,
   ticketToExport : TicketToExport,
   ledger: LedgerModule<L>
) : [list<operation>, ExportedTicket, LedgerModule<L>, Storage<A, L>] => {
   const { from_, token_id, amount } = ticketToExport;
   let operations : list<operation> = list([]);

   /** Allowance & Operator checks **/

   Storage.assert_token_exist(storage, token_id);
   const approvals = Storage.get_approvals(storage);

   const oldApprovals = Approvals.get_amount(approvals, from_, Tezos.get_sender(), token_id);
   const authorizedApprovals = Transfer.authorize_transfer(storage, approvals, from_, token_id, amount);
   const newApprovals = Approvals.get_amount(authorizedApprovals, from_, Tezos.get_sender(), token_id);

   if (oldApprovals != newApprovals) {
       const allowance_update: allowance_update_type = {
           owner: from_,
           spender: Tezos.get_sender(),
           token_id: token_id,
           new_allowance: newApprovals,
           diff: newApprovals - oldApprovals;
       };
       const allowance_event_op = Tezos.emit("%allowance_update", allowance_update);
       operations = list([allowance_event_op, ...operations]);
   }
   const balance = Ledger.get_for_user(ledger, from_, token_id);
   const balance_update: balance_event_data =
                {
                   owner: from_,
                   token_id: token_id,
                   new_balance: abs(balance - amount),
                   diff: -amount,
               };
   const event_balance = Tezos.emit("%balance_update", balance_update);
   operations = list([event_balance, ...operations]);
   const newLedger = Ledger.decrease_token_amount_for_user(ledger, from_, token_id, amount);
   let newStorage = Storage.set_approvals(storage, authorizedApprovals);
   newStorage = Storage.set_ledger(newStorage, newLedger.data);
   const ticket = Option.unopt_with_error(
      Tezos.create_ticket([token_id, None()], amount),
      Errors.cannot_create_ticket
   );
   return [operations, ticket, newLedger, newStorage];
};

export const export_tickets = <A, L>(
   op : ExportTicket,
   storage : Storage<A, L>,
   ledger : LedgerModule<L>
) : [list<operation>, Storage<A, L>] => {
   let operations : list<operation> = list([]);
   let finalOperations = list([]);
   let newLedger = ledger;
   let finalStorage = storage;

   if (Option.is_none(op.destination)) {
   for (const request of op.requests) {
      for (const tk of request.ticketsToExport) {
         const [newOps, ticket, updatedLedger, newStorage] = create_ticket(storage, tk, newLedger);
         newLedger = updatedLedger;
         operations = list([...newOps, ...operations]);
         const ticketReceiver: contract<ExportedTicket> = Tezos.get_contract_with_error(request.to_, Errors.invalid_destination);
         operations = list([Tezos.transaction(ticket, 0tez, ticketReceiver), ...operations]);
         finalStorage = newStorage;
      }
   }
   }
   if (Option.is_some(op.destination)) {
      for (const request of op.requests) {
         for (const tk of request.ticketsToExport) {
            const [newOps, ticket, updatedLedger, newStorage] = create_ticket(storage, tk, newLedger);
            newLedger = updatedLedger;
            operations = list([...newOps, ...operations]);
            let ticketOps : list<ExportedTicket> = list([ticket]);
            let finalTicketOps : list<ExportTicketsTo> = list([{to_: request.to_, ticketsToExport: ticketOps}]);
            const ticketReceiver: contract<list<ExportTicketsTo>> = Tezos.get_contract_with_error(Option.unopt(op.destination), Errors.invalid_destination);
            operations = list([Tezos.transaction(finalTicketOps, 0tez, ticketReceiver), ...operations]);
            finalStorage = newStorage;
         }
      }
   }

   /** Reverse operations list **/

   for (const op of operations) {    
    finalOperations = list([op, ...finalOperations]);
  }
  
   return [finalOperations, Storage.set_ledger(finalStorage, newLedger.data)];
};
