// Import necessary modules
#import "./data/token.jsligo" "Token"
#import "./data/ledger.jsligo" "Ledger"
#import "./data/storage.jsligo" "Storage"
#import "./data/admin.jsligo" "Admin"

type ExtendedStorage = {
   admin: Admin.T;
};
type ParametricStorage = Storage.T;
type Ledger = Ledger.ledger_module<Ledger.Multi_asset.L>;
export type Storage = ParametricStorage<ExtendedStorage, Ledger.Multi_asset.L>;

export const get_total_supply = (token_id: Token.T, s: Storage) : nat => {
    return match(Big_map.find_opt(token_id, s.assets.supply)) {
        when(Some(n)): do { return n };
        when(None): do { return 0n };
    };
};

export const balance_of = (params: {owner: address; token_id: Token.T}, s: Storage) : nat => {
   const key = [params.owner, params.token_id];
    return match(Big_map.find_opt(key, s.assets.ledger)) {
        when(Some(n)): do { return n };
        when(None): do { return 0n };
    };
};

export const is_token = (token_id: Token.T, s: Storage) : bool => {
    return match(Big_map.find_opt(token_id, s.assets.supply)) {
        when(Some(_n)): do { return true };
        when(None): do { return false };
    };
};

export const get_token_metadata = (token_id: Token.T, s: Storage) : map<string, bytes> => {
    return match(Big_map.find_opt(token_id, s.token_metadata)) {
        when(Some(token)): do { return token.token_info };
        when(None): do { return Map.empty };
    };
};

export const get_allowance = (params: {owner: address; spender: address; token_id: nat}, s: Storage) : nat => {
    const key = [params.owner, params.spender, params.token_id];
    return match(Big_map.find_opt(key, s.approvals)) {
        when(Some(n)): do { return n };
        when(None): do { return 0n };
    };
};

export const is_operator = (params: {owner: address; operator: address; token_id: nat}, s: Storage) : bool => {
    return match(s.operators) {
        when(Some(operators)): do {
            return match(Big_map.find_opt([params.owner, params.token_id], operators)) {
                when(Some(operators)): do { return Set.mem(params.operator, operators) };
                when(None): do { return false };
            };
         };
        when(None): do { return false };
    }
};
