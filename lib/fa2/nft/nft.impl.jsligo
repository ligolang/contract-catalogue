#import "../common/assertions.jsligo" "Assertions"

#import "../common/errors.mligo" "Errors"

#import "../common/tzip12.datatypes.jsligo" "TZIP12"

#import "../common/tzip16.datatypes.jsligo" "TZIP16"

#import "./extendable_nft.impl.jsligo" "NFTExtendable"

export type ledger = NFTExtendable.ledger;

export type operator = NFTExtendable.operator;

export type operators = NFTExtendable.operators;

export type storage = {
  ledger: ledger,
  operators: operators,
  token_metadata: TZIP12.tokenMetadata,
  metadata: TZIP16.metadata,
}

type ret = [list<operation>, storage];

const empty_storage: storage = {
  ledger: Big_map.empty,
  operators: Big_map.empty,
  token_metadata: Big_map.empty,
  metadata: Big_map.empty
}

@inline
const lift = (s: storage): NFTExtendable.storage<unit> => {
  return {
    extension: unit,
    ledger: s.ledger,
    operators: s.operators,
    token_metadata: s.token_metadata,
    metadata: s.metadata
  };
}

@inline
const unlift = ([ops, s]: [list<operation>, NFTExtendable.storage<unit>]): ret => {
  let storage = {
    ledger: s.ledger,
    operators: s.operators,
    token_metadata: s.token_metadata,
    metadata: s.metadata
  };
  return [ops, storage];
}

@entry
const transfer = (t: TZIP12.transfer, s: storage): ret =>
  unlift(NFTExtendable.transfer(t, lift(s)))

@entry
const balance_of = (b: TZIP12.balance_of, s: storage): ret =>
  unlift(NFTExtendable.balance_of(b, lift(s)))

@entry
const update_operators = (updates: TZIP12.update_operators, s: storage): ret =>
  unlift(NFTExtendable.update_operators(updates, lift(s)))

@view
const get_balance = (p: [address, nat], s: storage): nat =>
  NFTExtendable.get_balance(p, lift(s))

@view
const total_supply = (token_id: nat, s: storage): nat =>
  NFTExtendable.total_supply(token_id, lift(s))

@view
const all_tokens = (_: unit, s: storage): set<nat> =>
  NFTExtendable.all_tokens(unit, lift(s))

@view
const is_operator = (op: TZIP12.operator, s: storage): bool =>
  NFTExtendable.is_operator(op, lift(s))

@view
const token_metadata = (p: nat, s: storage): TZIP12.tokenMetadataData =>
  NFTExtendable.token_metadata(p, lift(s))
